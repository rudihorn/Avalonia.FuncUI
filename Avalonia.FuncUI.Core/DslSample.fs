namespace Avalonia.FuncUI.Core.DslSample

open Microsoft.FSharp.Quotations
open Microsoft.FSharp.Quotations.Patterns

open Avalonia.Controls
open Avalonia.Controls.Primitives
open Avalonia.Layout
open Avalonia.Media

module rec FuncUI =

    (* HACK *)
    // Type safe Attributes are the ultimate goal
    // the problems with them currently are
    // - Type providers cant generate DUs
    // - Classic one time code generation only works for compile time known controls

    let any<'R> : 'R = failwith "!"

    type Attr<'t> = 't -> unit
    
    let MakeAttr expr = 
        match expr with
        | PropertyGet (_, propInfo, _) ->
            let apply v target = 
                propInfo.SetValue(target, v)
            apply
        | _ -> failwith "Not a Property"

    let MakeAttr'<'a when 'a :> IControl> propInfo = 
        let apply v (target : 'a) = 
            target.SetValue(propInfo, v)
        apply

    type ViewElement<'t, 'c> = { 
        create : ViewElement<'t, 'c> -> 't;
        update : ViewElement<'t, 'c> -> 't -> unit;
        content : 'c;
        attributes : Attr<'t> list
    }

    let Width : float -> Layoutable -> unit = MakeAttr <@ any<Layoutable>.Width @>
    let Height : float -> Layoutable -> unit = MakeAttr <@ any<Layoutable>.Height @>
    let Background : IBrush -> TemplatedControl -> unit = MakeAttr <@ any<TemplatedControl>.Height @>

    (* Or define like this, which is typesafe! *)
    let Text : string -> TextBlock -> unit = MakeAttr' Avalonia.Controls.TextBlock.TextProperty

    (* Should later be generated by the type provider for each control *)

    let (&=) element attr = 
        let attrs = attr :: element.attributes 
        { element with attributes = attrs }

    let CastCreate v = v.create v :> IControl

    let (&&>) element content = 
        let f () = content.create content :> IControl
        { element with content = f :: (element.content) }

    let (&&=) element content =
        let f () = content.create content :> IControl
        { element with content = f }

    let None = 
        let create _ = null
        let update _ (_ : IControl) = ()
        { create = create; update = update; content = null; attributes = [] }

    let Button =
        let update v (c : Button) =
            c.Content <- v.content ()
            List.iter (fun v -> v c) v.attributes
        let create v = 
            let c = Avalonia.Controls.Button()
            update v c 
            c
        let nullelement = fun () -> null :> IControl
        { create = create; update = update; content = nullelement; attributes = [] }

    let TextBlock =
        let update v (c : TextBlock) = 
            c.Text <- v.content
            List.iter (fun v -> v c) v.attributes
        let create v = 
            let c = Avalonia.Controls.TextBlock()
            update v c 
            c
        { create = create; update = update; content = ""; attributes = []}

    let StackPanel =
        let update v (c : StackPanel) = 
            let instchild v = v ()
            c.Children.Clear()
            c.Children.AddRange(List.map instchild v.content)
            List.iter (fun v -> v c) v.attributes
        let create v = 
            let c = Avalonia.Controls.StackPanel()
            update v c
            c
        { create = create; update = update; content = []; attributes = []}

    let view () =
        let view =
            StackPanel 
            &&> (TextBlock &= Text "Test")
            &&> (
                StackPanel &= Width 100.0 &= Height 100.0
                &&> (
                    Button &= Width 100.0 &= Height 100.0 &= Background (SolidColorBrush(Colors.Red))
                        &&= (TextBlock &= Text "My Button")
                )
                &&> (TextBlock &= Text "Test")
                &&> (Button &= Width 100.0 &= Height 100.0)
            )

        let template = StackPanel &= Width 100.0 &= Height 100.0
        let ex2 = 
            template
            &&> (
                template
                &&> (TextBlock &= Text "test")
            )

        let partial_atts v = v &= Width 100.0 &= Height 100.0

        let ex3 = 
            template
            |> partial_atts
            &&> Button |> partial_atts
        ()